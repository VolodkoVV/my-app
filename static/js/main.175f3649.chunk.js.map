{"version":3,"sources":["components/info.js","components/Weather.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["Info","Weather","props","className","city","country","temp","sunrise","sunset","error","Form","onSubmit","weatherMethod","type","name","placeholder","API_KEY","App","state","undefined","pressure","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_date","getHours","getMinutes","getSeconds","setState","main","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uPAQeA,EANF,kBACT,6BACI,6IACA,4LCSOC,EAZC,SAAAC,GAAK,OACjB,yBAAKC,UAAU,eACVD,EAAME,MACP,6BAAK,oHAAoBF,EAAME,KAA1B,KAAkCF,EAAMG,SAC7C,kGAAiBH,EAAMI,MACvB,gFAAcJ,EAAMK,SACpB,mGAAkBL,EAAMM,SAGxB,uBAAGL,UAAU,SAASD,EAAMO,SCHrBC,EANF,SAAAR,GAAK,OACd,0BAAMC,UAAU,SAASQ,SAAUT,EAAMU,eACrC,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,2HCAFC,EAAU,mCA6EDC,E,4MAzEbC,MAAQ,CACNZ,UAAMa,EACNf,UAAMe,EACNd,aAASc,EACTC,cAAUD,EACVX,YAAQW,EACRV,WAAOU,G,EAGTE,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,yDACfD,EAAEE,mBACEpB,EAAOkB,EAAEG,OAAOC,SAAStB,KAAKuB,OAFnB,iCAKSC,MAAM,qDAAD,OAAsDxB,EAAtD,kBAAoEY,EAApE,kBALd,cAKPa,EALO,gBAMMA,EAAQC,OANd,OAMPC,EANO,OAQTvB,EAASuB,EAAKC,IAAIxB,QAClByB,EAAO,IAAIC,MACVC,QAAQ3B,GACT4B,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAEzE,EAAKC,SAAS,CACZlC,KAAMyB,EAAKU,KAAKnC,KAChBF,KAAM2B,EAAKjB,KACXT,QAAS0B,EAAKC,IAAI3B,QAClBe,SAAUW,EAAKU,KAAKrB,SACpBZ,OAAQ4B,EACR3B,WAAOU,IAnBI,wBAsBb,EAAKqB,SAAS,CACZlC,UAAMa,EACNf,UAAMe,EACNd,aAASc,EACTC,cAAUD,EACVX,YAAQW,EACRV,MAAO,sIA5BI,4C,6GAkCf,OACE,yBAAKN,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,iBACb,kBAAC,EAAD,CAAMS,cAAe8B,KAAKrB,iBAC1B,kBAAC,EAAD,CACEf,KAAMoC,KAAKxB,MAAMZ,KACjBF,KAAMsC,KAAKxB,MAAMd,KACjBC,QAASqC,KAAKxB,MAAMb,QACpBE,QAASmC,KAAKxB,MAAME,SACpBZ,OAAQkC,KAAKxB,MAAMV,OACnBC,MAAOiC,KAAKxB,MAAMT,iB,GA7DlBkC,IAAMC,W,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLqD,QAAQrD,MAAMA,EAAMsD,a","file":"static/js/main.175f3649.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Погодное приложение</h2>\r\n        <p>Узнайте погоду в вашем городе!</p>\r\n    </div>\r\n)\r\nexport default Info;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n    <div className=\"infoWeather\">\r\n        {props.city &&\r\n        <div><p>Местоположение: {props.city}, {props.country}</p>\r\n        <p>Температура: {props.temp}</p>\r\n        <p>Давление: {props.sunrise}</p>\r\n        <p>Закат солнца: {props.sunset}</p>\r\n        </div>\r\n        }\r\n        <p className=\"error\">{props.error}</p>\r\n    </div>\r\n);\r\nexport default Weather;","import React from \"react\";\r\n\r\nconst Form = props => (\r\n    <form className=\"former\" onSubmit={props.weatherMethod}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"Город\"></input>\r\n        <button>Получить погоду</button>\r\n    </form>\r\n)\r\nexport default Form;","import React from \"react\";\nimport Info from \"./components/info\";\nimport Weather from \"./components/Weather\";\nimport Form from \"./components/form\";\n\nconst API_KEY = \"bfbe63aaa0a9c8ba489de52d5dbc142a\";\n\nclass App extends React.Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    pressure: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n\n  gettingWeather = async (e) => {\n    e.preventDefault();\n    var city = e.target.elements.city.value;\n\n    if (city) {\n      const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      const data = await api_url.json();\n\n      var sunset = data.sys.sunset;\n      var date = new Date();\n      date.setTime(sunset);\n      var sunset_date = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        pressure: data.main.pressure,\n        sunset: sunset_date,\n        error: undefined\n      });\n    } else {\n      this.setState({\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: \"Введите название города!\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"conteiner\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info />\n              </div>\n              <div className=\"col-sm-7 form\">\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  sunrise={this.state.pressure}\n                  sunset={this.state.sunset}\n                  error={this.state.error} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}